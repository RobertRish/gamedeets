{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchGames.js","utils/queries.js","pages/SavedGames.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeGameId","gameId","savedGameIds","JSON","parse","updatedSavedGameIds","filter","savedGameId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_GAME","REMOVE_GAME","SearchGames","useState","searchedGames","setSearchedGames","searchInput","setSearchInput","setSavedGameIds","useMutation","saveGame","error","useEffect","gameIdArr","length","handleFormSubmit","event","a","preventDefault","slug","split","join","toLowerCase","console","log","fetch","response","ok","Error","json","results","gameData","map","game","id","gameName","name","artURL","background_image","handleSaveGame","gameToSave","find","title","Auth","loggedIn","variables","data","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","key","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedGames","removeGames","useQuery","loading","userData","me","handleDeleteGame","savedGames","image","creators","description","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","stopPropagation","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","logout","Modal","onHide","aria-labelledby","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f4e4d99.chunk.js","sourcesContent":["\nimport decode from 'jwt-decode';\n\n\nclass AuthService {\n  \n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  \n  loggedIn() {\n   \n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); \n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n   \n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    \n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n \n    localStorage.removeItem('id_token');\n    \n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedGameIds = () => {\n  const savedGameIds = localStorage.getItem('saved_games')\n    ? JSON.parse(localStorage.getItem('saved_games'))\n    : [];\n\n  return savedGameIds;\n};\n\nexport const saveGameIds = (gameIdArr) => {\n  if (gameIdArr.length) {\n    localStorage.setItem('saved_games', JSON.stringify(gameIdArr));\n  } else {\n    localStorage.removeItem('saved_games');\n  }\n};\n\nexport const removeGameId = (gameId) => {\n  const savedGameIds = localStorage.getItem('saved_games')\n    ? JSON.parse(localStorage.getItem('saved_games'))\n    : null;\n\n  if (!savedGameIds) {\n    return false;\n  }\n\n  const updatedSavedGameIds = savedGameIds?.filter((savedGameId) => savedGameId !== gameId);\n  localStorage.setItem('saved_games', JSON.stringify(updatedSavedGameIds));\n\n  return true;\n};\n","import { gql } from '@apollo/client';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n        gameCount\n        savedGames {\n          gameId\n          gameName\n          artURL\n        }\n      }\n    }\n  }\n`;\n\nexport const SAVE_GAME = gql`\n  mutation saveGame($gameData: GameInput!) {\n    saveGame(gameData: $gameData) {\n      _id\n      username\n      email\n      savedGames {\n        gameId\n        gameName\n        artURL\n      }\n    }\n  }\n`;\n\nexport const REMOVE_GAME = gql`\n  mutation removeGame($gameId: String!) {\n    removeGame(gameId: $gameId) {\n      _id\n      username\n      email\n      savedGames {\n        gameId\n        gameName\n        artURL\n\n      }\n    }\n  }\n`;\n\n\n","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\n//import { saveGames, searchGoogleGames } from '../utils/API';\nimport { saveGameIds, getSavedGameIds } from '../utils/localStorage';\n\n//Specs\nimport { useMutation } from '@apollo/client';\nimport { SAVE_GAME } from '../utils/mutations';\n\nconst SearchGames = () => {\n \n  const [searchedGames, setSearchedGames] = useState([]);\n \n  const [searchInput, setSearchInput] = useState('');\n\n  \n  const [savedGameIds, setSavedGameIds] = useState(getSavedGameIds());\n\n  const [saveGame, { error }] = useMutation(SAVE_GAME);\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveGameIds(savedGameIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    let slug = searchInput.split(' ').join('-').toLowerCase();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    console.log(\"Input is :   \" + searchInput);\n    try {\n      const response = await fetch(\n        `https://api.rawg.io/api/games?key=b84ccf2052cb47f282ee68d5c06e6991&page_size=40&search=${slug}`\n      );\n\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { results } = await response.json();\n      console.log(results);\n\n      const gameData = results.map((game) => ({\n        gameId: game.id,\n        gameName: game.name,\n        artURL: game.background_image,\n      }));\n\n      setSearchedGames(gameData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  \n  const handleSaveGame = async (gameId) => {\n    \n    const gameToSave = searchedGames.find((game) => game.gameId === gameId);\n    console.log(\"Saving game: \" + gameToSave.title + \"  ID: \" + gameToSave.gameId)\n    console.log(gameToSave);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    console.log(\"Token: \" + token);\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } =  await saveGame({\n        variables: { gameData: { ...gameToSave } }, }\n      );\n\n      setSavedGameIds([...savedGameIds, gameToSave.gameId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-secondary'>\n        <Container>\n          <h1>Search for Games</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a game'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='info' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedGames.length\n            ? `Viewing ${searchedGames.length} results:`\n            : 'To begin, search for a game'}\n        </h2>\n        <CardColumns>\n          {searchedGames.map((game) => {\n            return (\n              <Card key={game.gameId} border='dark'>\n                {game.artURL ? (\n                  <Card.Img src={game.artURL} alt={`The cover for ${game.gameName}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{game.gameName}</Card.Title>\n                  <Card.Text>{}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedGameIds?.some((savedGameId) => savedGameId === game.gameId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveGame(game.gameId)}>\n                      {savedGameIds?.some((savedGameId) => savedGameId === game.gameId)\n                        ? 'This game has already been saved!'\n                        : 'Save this Game!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchGames;\n","import { gql } from '@apollo/client';\n\nexport const GET_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      gameCount\n      savedGames {\n        gameId\n        gameName\n        artURL\n      }\n    }\n  }\n`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\n//import { getMe, handleDeleteGame } from '../utils/API';\nimport { removeGameId } from '../utils/localStorage';\nimport Auth from '../utils/auth';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_GAME } from '../utils/mutations';\n\nconst SavedGames = () => {\n\n  const [removeGames, { error }] = useMutation(REMOVE_GAME);\n\n  const { loading, data } = useQuery(GET_ME);\n  const userData = data?.me || {};\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteGame = async (gameId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeGames({\n        variables: { gameId },\n      });\n\n      removeGameId(gameId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-dark bg-light'>\n        <Container>\n          <h1>Veiwing your Game Search!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedGames.length\n            ? `Viewing ${userData.savedGames.length} saved ${userData.savedGames.length === 1 ? 'game' : 'games'}:`\n            : 'You have no saved games!'}\n        </h2>\n        <CardColumns>\n          {userData.savedGames.map((game) => {\n            return (\n              <Card key={game.gameId} border='dark'>\n                {game.image ? <Card.Img src={game.image} alt={`The cover for ${game.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{game.title}</Card.Title>\n                  <p className='small'>Creators: {game.creators}</p>\n                  <Card.Text>{game.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteGame(game.gameId)}>\n                    Delete this Search!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedGames;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n//import { createUser } from '../utils/API';\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    \n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n     \n    }\n\n    try {\n\n      const { data } = await addUser({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\n\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    \n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  \n    try {\n      const { data } = await login({\n        variables: { ...userFormData }\n      });\n\n      Auth.login(data.login.token);\n\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  \n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n           GameDeets\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Games\n              </Nav.Link>\n              {/* if user is logged in show saved games and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Games\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { setContext } from '@apollo/client/link/context';\nimport SearchGames from './pages/SearchGames';\nimport SavedGames from './pages/SavedGames';\nimport Navbar from './components/Navbar';\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={SearchGames} />\n            <Route exact path='/saved' component={SavedGames} />\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}